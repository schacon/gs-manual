= GitScribe Manual


== Workflows

Some notes on the technical aspects of the different workflows we want to cover in git-scribe.  That is, how are we going to store and deal with the review/editing, translation, version pegging and errata workflows at the Git level?  We will cover each major workflow and our proposed approach here.

=== Review/Editing (General, Technical, Copy)

This is the part of the publishing process where a reviewer of some role suggests changes to the text ranging from high level suggestions like the whole chapter needs to be approached differently down to simple misspellings or grammar mistakes.  This makes up the bulk of the pre-publish process where authors, editors and reviewers all must collaborate on a single work. How will we store this in Git?

=== Basic Review Branch Setup

The 'master' branch should be the latest author-accepted version of the work.  When review is started, it should be isolated in a separate branch or a separate repository so that an author can pull any/all of the changes in - the reviewers should not commit directly to master unless approved to do so by the author.  Each author and reviewer should have their own namespace in `refs/heads/review` that they consistently use. (ie: all of Jeff's reviews are in `refs/heads/review/jeff/[branch-name]`), it does not matter if they are using their own repository or a central one.  The branch name is free form, but should be descriptive of what the review is of.

    $ git branch -r
    master
    origin/master
    origin/review/tim/chapter1
    jeff/review/jeff/chapter1
    jeff/review/jeff/chapter2
    mel/review/mel/copy-chapter1

Review branches should be deleted from the server once incorporated.  This allows us to prune and only see which branches still have work on them the author needs to address.

=== Basic Notes

For basic inline notes, reviewers should use the normal asciidoc `NOTE` paragraph style, but make sure to add a 'Review' title - this makes it easy to see what's still in the source and highlights the note for the author as they read.  These would be examples of reviewer inline notes.

    .Review
    NOTE: This is an example
          single-paragraph note.
      
    .Review
    [NOTE]
    This is an example
    single-paragraph note.

You could also do a multi-paragraph note this way:

    .Review
    [NOTE]
    ===============================
    Some amazing piece of advice.
     
    That spans multiple paragraphs.
    ===============================

=== Text Edits

For editing actual text, simply edit the text in the document and commit each logical change separately with the explanation of why you changed it in the commit message.  The git-scribe tool should provide scripts to help split up a long review session into multiple smaller commits with explanations.

=== Commits Policy

In general, commits should contain small units of change, for example any notes a reviewer adds should be one commit per note.  Text changes should be one commit per paragraph unless it's something like changing one phrase globally or something similar.  The commit message should be a summary of what the change is and an optional explanation or context of why that change is needed.  The first line of the message should be the summary, followed by an optional blank line and then a longer explanation if needed.  If a reviewer does a single commit with lots of changes in it, that makes the authors job of picking, choosing and responding much more difficult.  Dozens or hundreds of small commits give us much more information and makes things easier on the tool and thus the author in reviewing them and deciding how to deal with them.  Grammar and spelling changes that are more objective can be grouped together into larger commits.  Changes that are more subjective should be as small as possible.

=== Sharing Review Work

Once a review is complete it should be pushed to a branch named review/[user]/[topic] and a pull request should be sent to the author.  This can be in the same repository that the author is using or in a separate repository. Once a pull request is sent, the branch should not be pushed to again unless requested by the author.  Once it is incorporated into the master branch, the review branch should be deleted so it can be purged.

    $ git scribe review register
    your short name: scott

    $ git scribe review start
    name of the branch: [  ]
    description of the branch: [  ]
    # creates branch off current origin/master as review/scott/[name]

    $ git scribe review commit
    # runs git add --patch and commits between each accepted patch

    $ git scribe review submit
    # you have 3 commits you are submitting as a review queue
    1. ryan - jan 20 - change all 'thiers' to 'theirs'
    2. ryan - jan 18 - various spelling fixes
    3. tim  - jan 18 - commit-tree command is too advanced for this section

    send pull request to the author(s) [Y/n]?
    submitting pull request for branch ... done
    # moves this branch to submitted/

=== Incorporating Review Work

The author(s) should always `git merge --no-ff` each review branch they want to address, then revert work that they want to reject with the reason it is being rejected in the revert commit message.  This gives us the most possible amount of data about what happened. Changes should not be rebased or cherry-picked.  This allows us to easily see what commits in which branches have already been addressed.

    $ git scribe review update
    # review work is available in 3 new branches

    1. origin/review/tim/chapter1 (3 commits)
    2. jeff/review/jeff/chapter1  (4 commits)
    3. jeff/review/jeff/chapter2 (1 commit)

    # running review purge

    $ git scribe review list
    (same as list above)

    $ git scribe review list --commits
    (same as list above, with all unique commits grouped under each)

    $ git scribe review show 1
    1. ryan - jan 20 - change all 'thiers' to 'theirs'
    2. ryan - jan 18 - various spelling fixes
    3. tim  - jan 18 - commit-tree command is too advanced for this section

    $ git scribe review show --diff 1
    $ git scribe review show --full-diff 1

    $ git scribe review merge 1
    # incorporating 3 commits
    1. change all 'thiers' to 'theirs'
    2. various spelling fixes
    3. commit-tree command is too advanced for this section

    $ git scribe review revert 2
    # reverting "various spelling fixes"

    $ git scribe review purge
    # deletes branches off all remotes that are already merged into origin/master
    # and purges remote branches

=== Inspecting Review History

    $ git scribe status

    Chapter 1 (127 lines, 2540 words)
      - 8 commits, 37 lines (30%) applied by 2 reviewers (jeff, anne)
        - jeff/chapter1
        - anne/copy-chapter1

    Chapter 2 (150 lines, 2837 words)
      - 3 commits, 12 lines (8%) applied from 1 reviewer (tim)
        - jeff/chapter2
      - 8 commits, 83 lines (68%) pending by 1 reviewer (anne)
        - jeff/chapter2

    Chapter 3 (15 lines, 164 words)

    Chapter 4 (8 lines, 35 words)

    Total: 4 Sections, 301 lines, 6123 words (~ 85 pages)

== Translations

After the book is completed, often, but sometimes simultaneously, translators will be converting the text into another language.  How do we manage this process and as the text becomes updated, how do we make that process as simple for the translators as possible to update their translation too.

    $ git branch -r
    master
    origin/master
    origin/trans/jeff/chapter1
    origin/trans/jeff/chapter2
    origin/trans/rick/chapter1

== Version Pegging

If the work is for software, the author(s) may well wish to peg versions of the book against versions of the software - so one version of the book may be most relevant to Rails 3.0 while another is for Rails 2.x series.  When revising the book or taking errata, one must decide which version branches to apply changes to - is it a misspelling that would apply to all versions?  Is it a new section that only applies to some versions?  Should it be addressed in all versions but has to be slightly different in the latest version?



